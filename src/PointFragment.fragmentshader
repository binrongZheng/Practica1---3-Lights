#version 330 core

in vec3 FragPos;  
in vec3 Normal;  
out vec4 color;

uniform vec3 lightPos; 
uniform vec3 viewPos;
uniform vec3 lightColor;
uniform vec3 objectColor;

uniform	vec3 Lambient;
uniform	vec3 Ldiffuse;
uniform	vec3 Lspecular;	
uniform	float Lconstant;
uniform	float Llinear;
uniform	float Lquadratic;

void main()
{	
    // Ambient
	vec3 ambient = Lambient* lightColor;
   	vec3 lightDir = normalize(lightPos-FragPos);
 
 // Diffuse 
	vec3 norm=normalize(Normal);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = Ldiffuse * diff * lightColor;
    
    // Specular
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = Lspecular * spec * lightColor;  
    
	//Distance
	float distance    = length(lightPos - FragPos);
    float attenuation = 1.0f / (Lconstant + Llinear * distance + Lquadratic * (distance * distance));    

    ambient  *= attenuation;  
    diffuse  *= attenuation;
    specular *= attenuation;   
            
	// Finally    
   vec3 result = (ambient + diffuse + specular) * objectColor;
    color = vec4(result, 1.0f);
}
