#version 330 core

in vec3 FragPos;  
in vec3 Normal;  
out vec4 color;

uniform vec3 lightPos; 
uniform vec3 viewPos;
uniform vec3 lightColor;
uniform vec3 objectColor;

uniform	vec3 Lambient;
uniform	vec3 Ldiffuse;
uniform	vec3 Lspecular;	
uniform vec3 Ldirection;
uniform	float Lconstant;
uniform	float Llinear;
uniform	float Lquadratic;
uniform float LcutOff;
uniform float LouterCutOff;

void main()
{	
	
	
	 // Ambient
		vec3 ambient = Lambient* lightColor;	
	 // Diffuse 
		vec3 norm=normalize(Normal);
		vec3 lightDir = normalize(lightPos-FragPos);
		float diff = max(dot(norm, lightDir), 0.0);
		vec3 diffuse = Ldiffuse * diff * lightColor;
		
		// Specular
		vec3 viewDir = normalize(viewPos - FragPos);
		vec3 reflectDir = reflect(-lightDir, norm);  
		float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
		vec3 specular = Lspecular * spec * lightColor;  
		
	//Distance
		float theta = dot(lightDir, normalize(-Ldirection));
		float epsilon = LcutOff-LouterCutOff;
		float intensity =clamp((theta-LouterCutOff)/epsilon,0,1);

		diffuse  *= intensity;
		specular *= intensity;   
		
		float distance    = length(lightPos - FragPos);
		float attenuation = 1.0f / (Lconstant + Llinear * distance + Lquadratic * (distance * distance));    
		ambient  *= attenuation;
		diffuse  *= attenuation;
		specular *= attenuation;   
		
	// Finally    
		color = vec4 ((ambient+diffuse+specular)*objectColor,1.0f);
   
}
